<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structured Software Jargon</title>
    <description>My Personal Stack Problems</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Aug 2017 18:31:08 -0700</pubDate>
    <lastBuildDate>Sun, 27 Aug 2017 18:31:08 -0700</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Node.js + Express Generator</title>
        <description>&lt;p&gt;At work, I don’t start brand new projects very often. At most of the jobs I have had, either the projects have already been established and tasks involve adding new features to it, or code bases are inherited from other companies/groups. Usually looking at someone else’s project for the first time is accompanied with phrases such as “Why would anyone do it this way?” or “If I was building this type of application I would have done it in [x] language and with [y] framework.”&lt;/p&gt;

&lt;p&gt;Side projects on the other hand usually only consist of starting from scratch. This is both exhilarating and exhausting. At least for me, the process usually goes as follows: Read about a new language/framework, decide to build something using that technology, then spend most of my Saturday setting up my developer environment, and finally barely get through a hello world app before my free time runs out. I’m sure that I’m not the only person with this workflow, and it shows by the number of new languages/frameworks that have some sort of generator/scaffolding tool that greatly speeds up the process.&lt;/p&gt;

&lt;p&gt;Recently I was trying to build a web app using React and needed a server that would serve the API and would also allow uploading files. I decided to use a Node.js server, but instantly had flash backs about the last time I attempted to use &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; from scratch and how I had spent most of my time trying to figure out which packages to include and which order to add them to my app.js file so that the server would start up and do what I needed. This time however, it went a lot smoother. Now, Express has an &lt;a href=&quot;https://expressjs.com/en/starter/generator.html&quot;&gt;express-generotor&lt;/a&gt; which scaffolds out the project for you and includes all of the needed dependencies to get you off the ground and running in no time.&lt;/p&gt;

&lt;p&gt;Let’s give it a try.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$npm install express-generator -g
$express myapp
$cd myapp
$npm i
$npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Done.
The project is built, installed, and running. If you go to the browser and navigate to localhost:3000, you will be greeted by a very basic page that says “Express” and a warm feeling in your stomach because you don’t have to spend the next 2 hours dealing with missing/mismatched dependencies.&lt;/p&gt;

&lt;p&gt;Now that you have the basics of the project built for you, it is time to decide how you want your project structured. You can always change you mind later, but it is a lot easier to decide now when you have only a few classes and components, than later when you have way more and way less time to change things around.&lt;/p&gt;

&lt;p&gt;After doing a lot of searching, blog reading, blog skimming, and sifting through StackOverflow answers, I found that I really like &lt;a href=&quot;https://stackoverflow.com/a/19623507/947240&quot;&gt;this&lt;/a&gt; structure which is demonstrated in &lt;a href=&quot;https://github.com/focusaurus/express_code_structure&quot;&gt;this Github repo&lt;/a&gt;. There is a lot going on there. I would recommend you taking a few minutes to read through it all.&lt;/p&gt;

&lt;p&gt;The main idea that I am looking for is where to put the router and model files for each component. I have worked on projects that have separated them into their own folders with all modals in one folder and all routers in another, but I like it better when everything is together in a single folder. It makes it easy to look at it and see what each component has, and what it is related to.&lt;/p&gt;

&lt;p&gt;If you look at the project that the express-generator generated for us, you will notice that it has created a router folder. Instead of using that, create a new folder under the root directory named app, and then create another folder under that named users. This is where all of the user files will live. Feel free to create a folder for any other components that you will need. The component names should match what each endpoint your API will be serving; users, customers, vehicles, unicorns, etc. Once you have created the necessary folders, move the routes/users.js file into the new users folder and rename it to router.js.&lt;/p&gt;

&lt;p&gt;Currently, the app is serving &lt;a href=&quot;http://jade-lang.com/&quot;&gt;jade&lt;/a&gt; files to the browser. For now, I am only going to be focusing on using this application as for API endpoints. Go ahead and delete the routes folder since we won’t be needing that either.&lt;/p&gt;

&lt;p&gt;The app.js file is the main entry point for all the incoming requests. If you handled all of the routes here, the file would get out of hand faster than you can say, “spaghetti junction.” To remedy this, we will only reference each components route file in the app.js.&lt;/p&gt;

&lt;p&gt;In app.js, change:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./routes/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./users/router'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will notice in app.js that there is already an entry to route the requests of /users to the correct users route.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To see the changes, you will need to stop the node server and then restart it. You will need to do that after every change which will get very annoying very quickly. Instead, you can use something like &lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;nodemon&lt;/a&gt;, &lt;a href=&quot;https://github.com/foreverjs/forever&quot;&gt;forever&lt;/a&gt;, or &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;pm2&lt;/a&gt; to watch the project for changes and restart the server so that you can focus on making code changes and not getting angry when your changes aren’t showing up because you forgot to restart the server. If you look in our package.json under scripts, you will notice that start is mapped to “node ./bin/www” so if you are going to use nodemon, you will need to start it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nodemon ./bin/www
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After the server is back up and running, you should be able to curl localhost:3000/users and get less than stellar response. When was the last time you wanted an API endpoint to return static text? Instead, you usually will want to retrieve records from a database. There are a slew of database drivers that you can use with node. Today, I’ve chosen to use &lt;a href=&quot;http://docs.sequelizejs.com/&quot;&gt;Sequalizejs&lt;/a&gt;. It is fairly easy to use, it has plenty of documentation to help you along your way, and it works with a few different databases. Currently I have MySQL running locally, so I am going to use that. To install:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save sequelize
npm install --save mysql2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a file named users-model.js in app/users. In this file, we are going to create the database connection, define the model, and add a function to save and get a list of users from the database.&lt;/p&gt;

&lt;p&gt;Add the following to users-model.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sequelize'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mytestapp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app_user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'supersecretpassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dialect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Connection has been establised to database'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error connecting to database'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'updatedAt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updatedAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upsert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s walk through what is going on here. First we are create an instance of sequelize and give it the credentials to connect to our database. As your app grows and you have more components, you will want to move this out of the user specific model and into an app wide class that each model can access. For now though, this is fine. Next we define the Users model. By default, when the app starts up, it will connect to the database, and sequelize will check to see if there is a Users table with the columns firstName and lastName, if there isn’t it will create on for us. This is nice because you don’t have to worry about the code being out of sync, but you will need to put more thought into it later after you have been inserting data into the table for months and then you need to add/alter a column.&lt;/p&gt;

&lt;p&gt;Next we have two functions, upsert(user) and findAll(options, callback). Upsert is used to either insert a new record or update an existing record if one already exists. This helps prevent duplicate records from getting created.&lt;/p&gt;

&lt;p&gt;The findAll function takes in search parameters to give to sequalize to built the query. To get a full list of the options, read over the &lt;a href=&quot;http://docs.sequelizejs.com/manual/tutorial/models-usage.html#data-retrieval-finders&quot;&gt;sequalize docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Back in app/users/router.js, remove the useless default ‘/’ function and replace it with the following, more meaningful code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed create user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed to get users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These functions map the base routes to either create or getAll depending on the request method. Once all of the code is in place and saved, give it a try.&lt;/p&gt;

&lt;p&gt;Insert a couple of users:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$curl -X POST -d '{&quot;firstName&quot;:&quot;dave&quot;, &quot;lastName&quot;: &quot;mcnavish&quot;}' -H &quot;Content-Type: application/json&quot; localhost:3000/users
$curl -X POST -d '{&quot;firstName&quot;:&quot;bruce&quot;, &quot;lastName&quot;: &quot;wayne&quot;}' -H &quot;Content-Type: application/json&quot; localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then retrieve the users:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$curl localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There you have it. Using the express generator, we quickly created a node.js project that serves our Users API. It isn’t too magical now, but we have laid the ground work for future development. We learned how to route requests, structure a project, connect to a database, and save and retrieve records from that same database. Pat yourself on the back, you have a working API.&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/08/26/Nodejs-server.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/26/Nodejs-server.html</guid>
        
        <category>nodejs</category>
        
        <category>express</category>
        
        <category>sequelize</category>
        
        
      </item>
    
      <item>
        <title>Effective Engineer Review</title>
        <description>&lt;p&gt;I recently finished reading &lt;a href=&quot;https://www.amazon.com/gp/product/0996128107/ref=oh_aui_detailpage_o05_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;The Effective Engineer&lt;/a&gt; by Edmond Lau. The book went into detail about what you can and should be doing to elevate yourself from being just a regular, run-of-the-mill software engineer, to being an awesome effective engineer. The book is well written, very informative, and includes plenty of interesting case studies from companies (mainly located in Silicon Valley) that have run into problems and situations that most companies around the world face.&lt;/p&gt;

&lt;p&gt;The book covers topics which include everything from how to better organize your tasks and goals, to explaining how you can grow your skill by mentoring and helping new hires. Other topics include; how to focus your time on the work that produces the best results (and explaining what ‘best results’ means), how to measure the work you have done so that you can spot improvements or issues early on, importance of automation, mastering your programming environment, and many others.&lt;/p&gt;

&lt;p&gt;I think it is a good book that all engineers, no matter how much experience you have, should read (With that said, younger developers will take away a lot more from this book.) Too often I find myself or my coworkers with our heads down coding and not taking the time to step back and ask the right questions about whether we are even making a difference or not. Just because you were blindly asked to do a task, doesn’t mean that you can’t at least question why it needs to be done in the first place. More often that not, I find that if I keep asking questions about a new feature or task, I discover that the answers lead to a completely different solution or the feature may not even be needed. A perfect example is recently we have been working on migrating away from a legacy system and a lot of the features are being included in the new system without asking the question of “Does this add value?” Just because five years ago someone needed to spend hours working on a feature, doesn’t mean that it applies today. These are the types of situations that the author covers in the book and I feel give great insight on how to tackle the situations to create the best outcome for you and your company.&lt;/p&gt;

&lt;p&gt;You can tell while reading through the book that the author has years of experience as a software engineer, and has spent a lot of time interviewing and researching how other engineers do their job. Most of the chapters consist of the author describing a problem, providing a solution, and then giving case studies or quotes from interviews that pertain to the subject. I particularly enjoyed the case studies that were paired with most topics. A lot of the case studies are of startup companies and the problems they face. Although I do not work at a startup, I feel that a lot of the points made throughout the book can be translated to any company. Some situations are not as easily translated in a large company, you might not have the ability to change the hiring process or dictate which languages and frameworks are used, but there are many different ways to make a difference. I feel the author does a good job of describing how you, no matter what your role, can start to make small differences that will eventually help you, and as a result, help others around you. Then once you are seen as an effective engineer, you will have a larger voice, and people will start turning to you more and more for your opinion and ideas, which will indirectly make them effective too.&lt;/p&gt;

&lt;p&gt;I am constantly looking for ways to become a better engineer, and &lt;em&gt;The Effective Engineer&lt;/em&gt; did just that. At the very least, it pushed me to finally start writing a blog. It also has helped me to question the tasks I do at work and how I go about doing them. Because of these reasons alone, I can’t help but recommend &lt;em&gt;The Effective Engineer&lt;/em&gt; to every developer out there that wants to do better at their career (and who doesn’t want that?)&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/08/12/Effective-Engineer-Review.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/12/Effective-Engineer-Review.html</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>SaltStack + Docker</title>
        <description>&lt;p&gt;Recently, we were continuously running into issue because we could not easily determine the versions of the applications that we had deployed to our non-production environments. The problem that we were facing was that we had many different servers, each running a few different php microservices (most running in Docker containers), and we had no way of knowing which version of each application was in each environment. This made it difficult to test and troubleshoot issues because project A v1.5.1 depended on project B v1.0.1 and project B depended on project C v2.2.1, and so on. Multiple that by 20 projects across 3 environments, and you quickly run into a management nightmare. Now, I know that right now many of you are already rattling off a thousand different management tools that can be used to deploy applications, keep track of versions, poop unicorns, monitor CPU usage, etc, but my company doesn’t use that tool, they don’t want to pay for it, and they don’t want to invest anyone’s time into figuring out how it works.&lt;/p&gt;

&lt;p&gt;This is where I come in. Given one to two business days with constant interruptions, I wanted to build a web app that would display all of the versions, of all of the applications, across all environments.&lt;/p&gt;

&lt;h3 id=&quot;saltstack--docker-inspect&quot;&gt;SaltStack + Docker inspect&lt;/h3&gt;
&lt;p&gt;At work, we use &lt;a href=&quot;https://saltstack.com/&quot;&gt;SaltStack&lt;/a&gt; to perform small tasks across multiple servers at once. It allows us to do things like check the rpm versions of packages across all servers, copy files, run scripts, etc. Currently, our applications are running in two different ways, some are served by an Apache server running on the host, and the rest of the applications are run in Docker containers. Using Salt, I was able to come up with two separate commands that captured all of the application version info and dumped it into a single file. For the Docker containers, this was accomplished by using &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/inspect/&quot;&gt;docker inspect&lt;/a&gt; to capture the fields I wanted and then format them in such a way that was easy to parse later.&lt;/p&gt;

&lt;p&gt;Docker inspect supports formatting its output using &lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;Golang templates&lt;/a&gt;. It is a little tricky to work with if you have never used it, but there is plenty of documentation on it and it is pretty powerful. After a little struggling, some tears, then golang hatred, then back to golang love, I finally ended up with this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;docker inspect –format ‘{{.Name}},{{.Created}},{{.Config.Image}},{{if and (.Config) (.Config.Env) (gt (len .Config.Env) 2)}}{{index .Config.Env 2}}{{end}}’ $(docker ps -q)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a snippet of what the output of that command is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HOSTNAME42:
    /app1_apache_1,2017-07-05T20:56:01.923093619Z,registry.local/positions:v0.0.19-rc,GIT_COMMIT=3cfcaf88803a6ed455a69aee63c3a0bc59ff906b
    /app2_apache_1,2017-07-05T18:12:52.758540195Z,registry.local/sessions:v0.0.6-rc,GIT_COMMIT=08728dc27a1ca1a7be1777811fd118bbd3e17411
    /app2_redis_1,2017-07-05T18:12:49.308514157Z,registry.local/redis:3.2-alpine,REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.4.tar.gz
    /app3_apache_1,2017-06-30T16:19:59.417421069Z,registry.local/accounts:v0.0.15-rc,GIT_COMMIT=83f53df7348a41f28d142750bf817850ef475974
    /proxy,2017-06-19T20:56:44.896440122Z,registry.local/apache:0.0.22-php7-local,
    /consul_agent,2017-03-13T23:19:06.908757417Z,registry.local/consul:0.7.5,DOCKER_BASE_VERSION=0.0.4
HOSTNAME51:
    /proxy,2017-06-30T15:44:42.588490143Z,registry.local/apache:0.0.22-php7-local,
    /consul_agent,2017-03-13T23:19:06.908757417Z,registry.local/consul:0.7.5,DOCKER_BASE_VERSION=0.0.4
HOSTNAME45:
    /app4_apache_1,2017-07-05T17:19:37.923555027Z,registry.local/configurations:v0.0.15-rc,GIT_COMMIT=1a50020a133acce981cc0361375f57cb47f016fc
    /app4_redis_1,2017-07-05T17:19:34.68029824Z,registry.local/redis:3.2-alpine,REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.4.tar.gz
    /app1_apache_1,2017-06-30T22:22:58.181982066Z,registry.local/messages:v0.0.5-rc,GIT_COMMIT=289c14f1fc84f4ece3e008225ce56ed03357c4a5
    /proxy,2017-06-19T20:57:08.976574148Z,registry.local/apache:0.0.22-php7-local,
    /consul_agent,2017-03-13T23:19:06.908757417Z,registry.local/consul:0.7.5,DOCKER_BASE_VERSION=0.0.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A few different things happened in order for me to get this output. First of all, Docker inspect formatted the fields I asked for, for every container running on the server. I structured it in such a way ( ,,… ) so that the fields are comma delimited and then I used this nasty piece of templating magic:  to get the git commit. I baked the git commit into the container at build time by setting it to an environment variable in the dockerfile using ARGS (maybe a future post will discuss how that works). The problem that I faced was that there is not an easy way to get specific environment variables and their values using Docker inspect. So that command is iterating over all of the containers environment variables and giving me the second one if it exists. (NOTE: you need to check if it exists because if you don’t, your docker inspect command will die a horrible death and you won’t get your precious version information at all, for any container.) This does pose a problem for containers with more than two environment variables, or with containers where the git commit hash is not second. I still need to come up with a better solution to this problem.&lt;/p&gt;

&lt;p&gt;Next you will notice that the application versions are grouped by hostname. This is done by Salt. Although helpful, later on it will make the parsing of this file just a little bit harder.&lt;/p&gt;

&lt;p&gt;Ok, now we have our version information in a single file, what are we going to do with it? In the next post, I will talk about how I created a nodejs application that accepts the file, saves it to the database, and servers it via RESTful endpoints.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/08/05/SaltStack-plus-Docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/05/SaltStack-plus-Docker.html</guid>
        
        <category>saltstack</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>Day 1</title>
        <description>&lt;p&gt;Welcome to the first of what will soon be many, blog posts.&lt;/p&gt;

&lt;p&gt;My goal is to create a software development blog that allows me to learn and share topics in greater detail which will lead me to become a better developer. I plan on covering topics that include frontend/backend development, design, devlops, scripting, and everything in between.&lt;/p&gt;

&lt;p&gt;Hopefully after this post, the articles will become a little more informative, and also include a few code snippets. Who doesn’t love code snippets?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//TODO: come up with awesome running code snippets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Aug 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/08/01/Day-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/01/Day-1.html</guid>
        
        <category>info</category>
        
        
      </item>
    
  </channel>
</rss>
